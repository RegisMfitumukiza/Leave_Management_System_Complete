services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: leave-management-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - leave-management-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: leave-management-eureka
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8761:8761"
    environment:
      - SERVER_PORT=8761
      - EUREKA_INSTANCE_HOSTNAME=eureka-server
      - EUREKA_DASHBOARD_USER=${EUREKA_DASHBOARD_USER}
      - EUREKA_DASHBOARD_PASSWORD=${EUREKA_DASHBOARD_PASSWORD}
    networks:
      - leave-management-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: leave-management-auth
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8081:8081"
    environment:
      # Spring Configuration
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${AUTH_DB_HOST}:${AUTH_DB_PORT}/${AUTH_DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${AUTH_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${AUTH_DB_PASSWORD}
      
      # Database Configuration
      - DB_DRIVER=${DB_DRIVER}
      
      # JPA Configuration
      - JPA_DDL_AUTO=${JPA_DDL_AUTO}
      - JPA_SHOW_SQL=${JPA_SHOW_SQL}
      - HIBERNATE_FORMAT_SQL=${HIBERNATE_FORMAT_SQL}
      - HIBERNATE_DIALECT=${HIBERNATE_DIALECT}
      
      # File Upload Configuration
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE}
      
      # JWT Configuration
      - JWT_SECRET=${AUTH_JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      
      # Mail Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - MAIL_DEBUG=${MAIL_DEBUG}
      - MAIL_ENABLED=${MAIL_ENABLED}
      
      # Google OAuth Configuration
      - GOOGLE_CLIENT_ID=${AUTH_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${AUTH_GOOGLE_CLIENT_SECRET}
      
      # Eureka Configuration
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - EUREKA_INSTANCE_HOSTNAME=auth-service
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${EUREKA_INSTANCE_PREFER_IP_ADDRESS}
      - EUREKA_REGISTRY_FETCH_INTERVAL=${EUREKA_REGISTRY_FETCH_INTERVAL}
      - EUREKA_INSTANCE_INFO_REPLICATION_INTERVAL=${EUREKA_INSTANCE_INFO_REPLICATION_INTERVAL}
      - EUREKA_LEASE_RENEWAL_INTERVAL=${EUREKA_LEASE_RENEWAL_INTERVAL}
      - EUREKA_LEASE_EXPIRATION_DURATION=${EUREKA_LEASE_EXPIRATION_DURATION}
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS}
      - CORS_MAX_AGE=${CORS_MAX_AGE}
      
      # Auth Service CORS Configuration (mapped to app.cors.*)
      - app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS}
      - app.cors.allowed-methods=${CORS_ALLOWED_METHODS}
      - app.cors.allowed-headers=${CORS_ALLOWED_HEADERS}
      - app.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS}
      - app.cors.max-age=${CORS_MAX_AGE}
      
      # Logging Configuration
      - LOG_LEVEL_SECURITY=${LOG_LEVEL_SECURITY}
      - LOG_LEVEL_OAUTH2=${LOG_LEVEL_OAUTH2}
      - LOG_LEVEL_APP=${LOG_LEVEL_APP}
      - LOG_LEVEL_ROOT=${LOG_LEVEL_ROOT}
      - LOG_LEVEL_HIBERNATE=${LOG_LEVEL_HIBERNATE}
      - LOG_LEVEL_HIBERNATE_BINDER=${LOG_LEVEL_HIBERNATE_BINDER}
      - LOG_LEVEL_ACTUATOR=${LOG_LEVEL_ACTUATOR}
      - LOG_LEVEL_AUTOCONFIG=${LOG_LEVEL_AUTOCONFIG}
      - LOG_LEVEL_CONTEXT=${LOG_LEVEL_CONTEXT}
      - LOG_LEVEL_WEB=${LOG_LEVEL_WEB}
      - LOG_LEVEL_EUREKA=${LOG_LEVEL_EUREKA}
      - LOG_LEVEL_FEIGN=${LOG_LEVEL_FEIGN}
      
      # Feign Configuration
      - FEIGN_CONNECT_TIMEOUT=${FEIGN_CONNECT_TIMEOUT}
      - FEIGN_READ_TIMEOUT=${FEIGN_READ_TIMEOUT}
      - FEIGN_LOGGER_LEVEL=${FEIGN_LOGGER_LEVEL}
      - FEIGN_CIRCUIT_BREAKER_ENABLED=${FEIGN_CIRCUIT_BREAKER_ENABLED}
      - FEIGN_HYSTRIX_ENABLED=${FEIGN_HYSTRIX_ENABLED}
      - FEIGN_COMPRESSION_REQUEST=${FEIGN_COMPRESSION_REQUEST}
      - FEIGN_COMPRESSION_RESPONSE=${FEIGN_COMPRESSION_RESPONSE}
      
      # Management Configuration
      - HEALTH_SHOW_DETAILS=${HEALTH_SHOW_DETAILS}
    networks:
      - leave-management-network
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Leave Management Service
  leave-service:
    build:
      context: .
      dockerfile: leave-service/Dockerfile
    container_name: leave-management-leave
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8082:8082"
    environment:
      # Spring Configuration
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8082
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${LEAVE_DB_HOST}:${LEAVE_DB_PORT}/${LEAVE_DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${LEAVE_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${LEAVE_DB_PASSWORD}
      
      # Database Configuration
      - DB_DRIVER=${DB_DRIVER}
      
      # Flyway Configuration
      - FLYWAY_ENABLED=${FLYWAY_ENABLED}
      - FLYWAY_BASELINE_ON_MIGRATE=${FLYWAY_BASELINE_ON_MIGRATE}
      - FLYWAY_LOCATIONS=${FLYWAY_LOCATIONS}
      - FLYWAY_VALIDATE_ON_MIGRATE=${FLYWAY_VALIDATE_ON_MIGRATE}
      
      # JPA Configuration
      - JPA_DDL_AUTO=${JPA_DDL_AUTO}
      - JPA_SHOW_SQL=${JPA_SHOW_SQL}
      - HIBERNATE_FORMAT_SQL=${HIBERNATE_FORMAT_SQL}
      - HIBERNATE_DIALECT=${HIBERNATE_DIALECT}
      
      # File Upload Configuration
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE}
      
      # JWT Configuration
      - JWT_SECRET=${LEAVE_JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      
      # Mail Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - MAIL_DEBUG=${MAIL_DEBUG}
      - MAIL_ENABLED=${MAIL_ENABLED}
      
      # Google OAuth Configuration
      - GOOGLE_CLIENT_ID=${LEAVE_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${LEAVE_GOOGLE_CLIENT_SECRET}
      
      # Service Configuration
      - AUTH_SERVICE_URL=http://auth-service:8081
      - SERVICE_ACCOUNT_EMAIL=${SERVICE_ACCOUNT_EMAIL}
      - SERVICE_ACCOUNT_PASSWORD=${SERVICE_ACCOUNT_PASSWORD}
      
      # Document and Reports Configuration
      - DOCUMENT_UPLOAD_DIR=${DOCUMENT_UPLOAD_DIR}
      - REPORTS_DIRECTORY=${REPORTS_DIRECTORY}
      
      # Eureka Configuration
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - EUREKA_INSTANCE_HOSTNAME=leave-service
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${EUREKA_INSTANCE_PREFER_IP_ADDRESS}
      - EUREKA_REGISTRY_FETCH_INTERVAL=${EUREKA_REGISTRY_FETCH_INTERVAL}
      - EUREKA_INSTANCE_INFO_REPLICATION_INTERVAL=${EUREKA_INSTANCE_INFO_REPLICATION_INTERVAL}
      - EUREKA_LEASE_RENEWAL_INTERVAL=${EUREKA_LEASE_RENEWAL_INTERVAL}
      - EUREKA_LEASE_EXPIRATION_DURATION=${EUREKA_LEASE_EXPIRATION_DURATION}
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS}
      - CORS_MAX_AGE=${CORS_MAX_AGE}
      
      # Logging Configuration
      - LOG_LEVEL_EUREKA=${LOG_LEVEL_EUREKA}
      - LOG_LEVEL_FEIGN=${LOG_LEVEL_FEIGN}
      - LOG_LEVEL_WEB=${LOG_LEVEL_WEB}
      - LOG_LEVEL_SECURITY=${LOG_LEVEL_SECURITY}
      - LOG_LEVEL_APP=${LOG_LEVEL_APP}
      - LOG_LEVEL_ROOT=${LOG_LEVEL_ROOT}
      - LOG_LEVEL_HIBERNATE=${LOG_LEVEL_HIBERNATE}
      - LOG_LEVEL_HIBERNATE_BINDER=${LOG_LEVEL_HIBERNATE_BINDER}
      - LOG_LEVEL_ACTUATOR=${LOG_LEVEL_ACTUATOR}
      - LOG_LEVEL_AUTOCONFIG=${LOG_LEVEL_AUTOCONFIG}
      - LOG_LEVEL_CONTEXT=${LOG_LEVEL_CONTEXT}
      - LOG_LEVEL_CLIENT=${LOG_LEVEL_CLIENT}
      
      # Feign Configuration
      - FEIGN_CONNECT_TIMEOUT=${FEIGN_CONNECT_TIMEOUT}
      - FEIGN_READ_TIMEOUT=${FEIGN_READ_TIMEOUT}
      - FEIGN_LOGGER_LEVEL=${FEIGN_LOGGER_LEVEL}
      - FEIGN_CIRCUIT_BREAKER_ENABLED=${FEIGN_CIRCUIT_BREAKER_ENABLED}
      - FEIGN_HYSTRIX_ENABLED=${FEIGN_HYSTRIX_ENABLED}
      - FEIGN_COMPRESSION_REQUEST=${FEIGN_COMPRESSION_REQUEST}
      - FEIGN_COMPRESSION_RESPONSE=${FEIGN_COMPRESSION_RESPONSE}
      
      # Management Configuration
      - HEALTH_SHOW_DETAILS=${HEALTH_SHOW_DETAILS}
    volumes:
      - leave_uploads:/app/uploads
      - leave_reports:/app/reports
    networks:
      - leave-management-network
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./leavefrontend
      dockerfile: Dockerfile
    container_name: leave-management-frontend
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "3000:80"
    environment:
      - VITE_AUTH_SERVICE_URL=${VITE_AUTH_SERVICE_URL}
      - VITE_LEAVE_SERVICE_URL=${VITE_LEAVE_SERVICE_URL}
      - VITE_API_URL=${VITE_API_URL}
      - VITE_API_TIMEOUT=${VITE_API_TIMEOUT}
    networks:
      - leave-management-network
    depends_on:
      - auth-service
      - leave-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  leave_uploads:
    driver: local
  leave_reports:
    driver: local

networks:
  leave-management-network:
    driver: bridge